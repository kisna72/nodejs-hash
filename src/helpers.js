const crypto = require("crypto-promise");//using promise based crypto library


async function generateSha256Hash(str){
  //This function will convert any provided alphanumeric string into SHA256 Hash. Some cryptocurrencies use SHA256.
  // Since hash calculations can take time, we will use async await syntax to return promise. 
  const hashobj = await crypto.hash("sha256")(str)
  return hashobj.toString("hex"); 
}

async function getRandomAlphaNumericString(length){
  //crypto.randomBytes(length) gives you an array of randomly generated bytes. Since we only want alphanumeric string,
  // we will use a while loop. 
  let randChar = ""
  while (randChar.length < length){
    const randomByte = await crypto.randomBytes(1);
    if( (randomByte[0] >=48 && randomByte[0] <=57 ) || (randomByte[0] >= 65 && randomByte[0] <= 90) || (randomByte[0] >= 97 && randomByte[0] <= 122) ){
      const t = randomByte.toString("ascii");
      randChar += t
    }

  }
  return randChar
}

async function generateNewHash(company_name, previous_hash_value){
  const timestamp = Date.now();
  //Requirements for 12-16 character string. We will randomly choose a number from 12-16. 
  const randCharLength = 12 + Math.floor(Math.random()*5)
  const randChar = await getRandomAlphaNumericString(randCharLength);
  const pre_hash_string = randChar + timestamp.toString() + company_name + previous_hash_value;
  const new_hash = await generateSha256Hash(pre_hash_string);
  return new_hash;
}



module.exports = { 
  generateSha256Hash,
  getRandomAlphaNumericString,
  generateNewHash
  
}

